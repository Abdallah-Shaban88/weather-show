{"ast":null,"code":"var _jsxFileName = \"/home/body/Portofolio/weather-show/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport \"./style.css\";\nimport Banner from './components/Banner';\nimport DayInfo from './components/DayInfo';\nimport WeekInfo from \"./components/WeekInfo\";\nimport ExtraDetails from \"./components/ExtraDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [info, setInfo] = useState([]);\n\n  const getData = async () => {\n    const response = await axios.get('https://api.weatherapi.com/v1/forecast.json?key=35360d18e86c4006a60111222212904&q=giza');\n    const data = await response.data;\n    setInfo(data);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function convertTime(time) {\n    // Check correct time format and split into components\n    time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n    if (time.length > 1) {\n      // If time format correct\n      time = time.slice(1); // Remove full string match value\n\n      time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n\n      time[0] = +time[0] % 12 || 12; // Adjust hours\n    }\n\n    return time.join('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [info.length !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Banner, {\n        time: info.location.localtime.slice(11, 16),\n        name: info.location.name,\n        temp_c: info.current.temp_c,\n        icon: info.current.condition.icon,\n        text: info.current.condition.text,\n        convertTime: convertTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ExtraDetails, {\n        windKPH: info.current.wind_kph,\n        windDegree: info.current.wind_degree,\n        windDir: info.current.wind_dir,\n        pressureIn: info.current.pressure_in,\n        humidity: info.current.humidity,\n        cloud: info.current.cloud,\n        feelsLikeC: info.current.feelslike_c,\n        visibility: info.current.vis_km,\n        uv: info.current.uv,\n        gust: info.current.gust_kph\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(DayInfo, {\n        infos: info.forecast.forecastday[0],\n        convertTime: convertTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 28\n    }, this) : console.log('false'), /*#__PURE__*/_jsxDEV(WeekInfo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+1zfbqR6+rdUDHAscg9cjUhEYtk=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/body/Portofolio/weather-show/src/App.js"],"names":["React","useState","useEffect","axios","Banner","DayInfo","WeekInfo","ExtraDetails","App","info","setInfo","getData","response","get","data","convertTime","time","toString","match","length","slice","join","location","localtime","name","current","temp_c","condition","icon","text","wind_kph","wind_degree","wind_dir","pressure_in","humidity","cloud","feelslike_c","vis_km","uv","gust_kph","forecast","forecastday","console","log"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport axios from 'axios'\nimport \"./style.css\";\n\nimport Banner from './components/Banner'\nimport DayInfo from './components/DayInfo'\nimport WeekInfo from \"./components/WeekInfo\";\nimport ExtraDetails from \"./components/ExtraDetails\";\n\nexport default function App() {\n  const[info, setInfo] = useState([])\n\n  const getData = async () => {\n    const response = await axios.get('https://api.weatherapi.com/v1/forecast.json?key=35360d18e86c4006a60111222212904&q=giza');\n    const data = await response.data;\n      setInfo(data)\n  }\n  useEffect(() => {\n    getData()\n  },[])\n\n  function convertTime (time) {\n    // Check correct time format and split into components\n    time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n  \n    if (time.length > 1) { // If time format correct\n      time = time.slice (1);  // Remove full string match value\n      time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n      time[0] = +time[0] % 12 || 12; // Adjust hours\n    }\n    return time.join ('');\n}\n\n  return (\n    <div>\n      {info.length !== 0 ? <div >\n      <Banner \n        time ={info.location.localtime.slice(11, 16)}\n        name ={info.location.name} \n        temp_c={info.current.temp_c} \n        icon ={info.current.condition.icon} \n        text={info.current.condition.text} \n        convertTime = {convertTime}\n        />\n      <ExtraDetails\n        windKPH ={info.current.wind_kph}\n        windDegree ={info.current.wind_degree}\n        windDir ={info.current.wind_dir}\n        pressureIn ={info.current.pressure_in}\n        humidity ={info.current.humidity}\n        cloud ={info.current.cloud}\n        feelsLikeC ={info.current.feelslike_c}\n        visibility ={info.current.vis_km}\n        uv ={info.current.uv}\n        gust ={info.current.gust_kph}\n      />  \n      <DayInfo infos={info.forecast.forecastday[0]} convertTime={convertTime}/>\n    </div> : console.log('false')}\n    <WeekInfo />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}